<.top_navigation path={~w"contributions submission-guidelines"} />
<heading class="flex items-end">
  <h1 class="pt-3 text-4xl text-[#66626c] font-medium dark:text-white">Submission Guidelines</h1>
</heading>
<div class="max-w-[800px] text-neutral-600 pb-16 dark:text-neutral-100">
  <p class="pt-4 text-lg tracking-wide">
    So you have decided to submit a project to Elixirland? Great! Here are some guidelines and background information to help you get started.
  </p>
  <h2 class="text-2xl pt-6 font-semibold">What is an Elixirland project?</h2>
  <p class="text-[1.1rem] tracking-wide">
    An Elixirland project is a programming task that is designed to help users learn some area of the Elixir ecosystem by building small applications. Projects are meant to be implemented with production-quality code in mind. This means that the implementations should be well-structured, tested, and documented.
  </p>
  <p class="text-[1.1rem] tracking-wide indent-8">
    Each project also comes with an example implementation that demonstrates how the task can be solved. The example implementations serve as a reference for users who are stuck or want to compare their own implementations with a working implementation. Also, the example implementations serve as a way to showcase idiomatic Elixir code.
  </p>
  <h2 class="text-2xl pt-6 font-semibold">Project description</h2>
  <p class="text-[1.1rem] tracking-wide">
    Your project lives in a GitHub repository and, once it is approved, it is published on the Elixirland website automatically whenever your push changes to the repository. Your project's repository contains the project description inside a file called <code>README.md</code>. This file is used to display the project description on the Elixirland website.
  </p>
  <p class="text-[1.1rem] tracking-wide indent-8">
    Project authors are free to design their project how they wish, but they must follow a minimal set of requirements to ensure consistency and quality. Here is an overview of the different sections that your project description must contain.
  </p>
  <ul class="text-[1.1rem] p-6 bg-slate-100 border border-slate-200 rounded-md my-6 -mx-[2px]">
    <h3 class="text-xl font-medium underline">Required sections</h3>
    <li class="block">
      <h4 class="text-lg font-medium pt-4">Task description</h4>
      <p>
        The task description explains what the user needs to do to solve the project. This section is mandatory and should be clear and concise to avoid confusion.
      </p>
    </li>
    <li class="block">
      <h4 class="text-lg font-medium pt-4">Requirements</h4>
      <p>
        The requirements list any constraints or conditions that the implementation must satisfy. This section is mandatory and should be specific to avoid ambiguity.
      </p>
    </li>
  </ul>
  <p class="text-[1.1rem] tracking-wide indent-8">
    The task description and requirements are the core of your project and should appear in the given order and consecutively. However, these sections do not have to be placed at the beginning of your project description. You can add other sections before or after these two sections, as long as they are clearly separated from the task description and requirements and the overall structure follows a logical order.
  </p>
  <p class="text-[1.1rem] tracking-wide indent-8">
    Here is a list of suggested sections that you can include in your project to help users understand and solve the project. These sections are optional, but they can be very helpful for users who need more context or guidance.
  </p>
  <ul class="text-[1.1rem] p-6 bg-slate-100 border border-slate-200 rounded-md my-6 -mx-[2px]">
    <h3 class="text-xl font-medium underline">Suggested sections</h3>
    <li class="block">
      <h4 class="list-item text-lg font-medium pt-4">Learning objectives (optional)</h4>
      <p>
        The learning objectives describe what users can expect to learn by solving the project. This section is optional but can be helpful for users who want to know what they will gain from solving the task.
      </p>
      <p class="indent-8">
        If you add this section, please position it after the introductory section, or at the beginning of the project if there is no introduction.
      </p>
    </li>
    <li class="block">
      <h4 class="list-item text-lg font-medium pt-4">Introduction (optional)</h4>
      <p>
        The introduction provides some background information about the task and sets the context for the project. This section is optional but can be useful for users who want to understand the problem domain better.
      </p>
      <p class="indent-8">
        The name of this section can be "Introduction" or any other name that you think is appropriate.
      </p>
    </li>
    <li class="block">
      <h4 class="text-lg font-medium pt-4">Limitations (optional)</h4>
      <p>
        The limitations describe any features that the user does not have to implement. This section is optional but can be very helpful for users that need to know what is expected of them in more detail.
      </p>
    </li>
  </ul>
  <p class="text-[1.1rem] tracking-wide indent-8">
    In addition to these sections, you can include any other sections that you think are necessary to help users understand and solve the project. However, make sure to keep the project structure consistent and easy to navigate.
  </p>
  <p class="text-[1.1rem] tracking-wide indent-8">
    You might wish to add information about how users can get started with their implementation of your project or a reference to your example implementation. This information is, however, automatically added to your project when it is published on Elixirland. Have a look at any of the existing projects on Elixirland to see how this information is presented, so you can decide what to include in your project and what to leave out.
  </p>
  <ul class="text-[1.1rem] p-6 bg-slate-100 border border-slate-200 rounded-md my-6 -mx-[2px]">
    <h3 class="text-xl font-medium underline">Automatically added sections</h3>
    <li class="block">
      <h3 class="list-item text-lg font-medium pt-4">How to get started</h3>
      <p>
        The "How to get started" section guides users through the process of starting their own implementation of a project. This section prewritten by Elixirland and added to your project when it is published from GitHub to the Elixirland website.
      </p>
    </li>
    <li class="block">
      <h3 class="list-item text-lg font-medium pt-4">Example implementation</h3>
      <p>
        This sections contains practical information about the example implementation that accompanies the project. This is not where the example implementation is provided, but rather an explanation of where to find the example implementation and what it contains. This section prewritten by Elixirland and added to your project when it is published from GitHub to the Elixirland website.
      </p>
    </li>
  </ul>
  <h2 class="text-2xl pt-6 font-semibold">Thumbnail and preview video</h2>
  <p class="text-[1.1rem] tracking-wide">
    When you submit your project for approval, it must include a thumbnail image and a preview video. These assets are used to promote your project on the Elixirland website and help users understand what your project is about. Below are the requirements for the thumbnail image and preview video.
  </p>
  <ol class="text-[1.1rem]">
    <li class="block">
      <h3 class="text-lg font-medium pt-6">Thumbnail image</h3>
      <p>
        The thumbnail image is an image that represents your project. It should give users an idea of what your project is about. The thumbnail image should have the aspect ration 3:2 and have a resolution of at least 600x400 pixels. The image must be in
        <code>.WEBP</code>
        format.
      </p>
      <p class="indent-8">
        Add the preview video to the root directory of your project repository and name it <code>thumbnail.webp</code>. Elixirland can help you create a thumbnail image if you don't have one. Just reach out to the Elixirland team for assistance.
      </p>
    </li>
    <li class="block">
      <h3 class="text-lg font-medium pt-6">Preview video</h3>
      <p>
        The preview video is a short video that showcases the example implementation of your project in action. The video should not be more than 2 minutes long and give users a quick overview of what your project does. The video should be in
        <code>.WEBM</code>
        format and have an aspect ratio of 3:2. The maximum file size is 50MB.
      </p>
      <p class="indent-8">
        Add the preview video to the root directory of your project repository and name it <code>preview.webm</code>.
      </p>
    </li>
  </ol>

  <h2 class="text-2xl pt-6 font-semibold">Example implementation requirements</h2>
  <p class="text-[1.1rem] tracking-wide">
    The example implementation is an important part of the project as it serves as a reference for users who are stuck or want to compare their own implementations with a working implementation. To ensure it meets this purpose, the example implementation should be well-structured, thoroughly tested, and properly documented. Below are the key requirements for the example implementation.
  </p>
  <ol class="list-decimal list-inside text-[1.1rem]">
    <li class="block">
      <h3 class="list-item text-lg font-medium pt-6">Correctness</h3>
      <p>
        The example implementation must solve the project task correctly, fully satisfying the requirements outlined in the project.
      </p>
    </li>
    <li class="block">
      <h3 class="list-item text-lg font-medium pt-6">Idiomatic Elixir</h3>
      <p>
        The implementation should be written in idiomatic Elixir, adhering to the conventions and best practices established by the Elixir community. Coding styles and preferences vary, of course, so this is mostly up to the project author.
      </p>
    </li>
    <li class="block">
      <h3 class="list-item text-lg font-medium pt-6">Test coverage</h3>
      <p>
        The example implementation should include tests to verify that it functions as expected. These tests should cover the main functionality as well as any potential edge cases. While it’s not necessary to achieve 100% test coverage, the goal is to demonstrate effective testing practices that align with production-quality code. While this is primarily the responsibility of the project author, reviewers can offer valuable feedback on the adequacy of test coverage. Requiring that the example implementation is tested allows learners to learn to test their Elixir code well.
      </p>
    </li>
    <li class="block">
      <h3 class="list-item text-lg font-medium pt-6">Documentation</h3>
      <p>
        The example implementation should be accompanied by clear and concise documentation. This documentation should explain the purpose of the implementation, how it works, and any significant design decisions. As with test coverage, the documentation should meet the standards of production-quality code. Although more documentation isn’t always better, it should be informative and help learners understand how to document their code effectively.
      </p>
    </li>
  </ol>
  <h2 class="text-2xl pt-6 font-semibold">Getting started</h2>
  <p class="text-[1.1rem] tracking-wide">
    To submit a project to Elixirland, you need to follow a few steps. The process is designed to be straightforward and to ensure that your project meets the quality standards of Elixirland. Below is an overview of the steps you need to take to submit a project.
  </p>
  <ol class="list-decimal list-inside">
    <li class="block">
      <h3 class="list-item text-lg font-medium pt-6">Request a repository for your project</h3>
      <p>
        To submit a project, you need to request a repository from the Elixirland team. This repository will be set up with the necessary structure and templates to help you get started. You can change the template to fit your project, but make sure to follow the project structure and example implementation requirements outlined in this document.
      </p>
    </li>
    <li class="block">
      <h3 class="list-item text-lg font-medium pt-6">Implement</h3>
      <p>
        Once you have access to the repository of your project, you can start implementing the project. Make sure to follow the project structure and example implementation requirements outlined in this document.
      </p>
    </li>
    <li class="block">
      <h3 class="list-item text-lg font-medium pt-6">Request publication</h3>
      <p>
        When you are ready to submit your project, you can request publication by reaching out to the Elixirland team. They will review your project and provide feedback if necessary. Once your project is approved, your repository will be made public and the project will be published on the Elixirland website. Any future changes you make to the repository will automatically sync with the website.
      </p>
    </li>
  </ol>
  <p class="mb-10 mt-6">
    To request a repository for your project, please open an issue in the
    <.link
      class="text-blue text-blue-500 dark:text-blue-400 underline"
      href="https://github.com/elixirland/elixirland/issues"
    >
      Elixirland GitHub repository
    </.link>
    using the button below. Please include a brief statement about what area of the Elixir ecosystem your project wil cover.
  </p>
  <.link
    href="https://github.com/elixirland/elixirland/issues"
    class="bg-violet-900 text-white px-3.5 py-2.5 text-xl rounded hover:bg-[#65268c] font-medium shadow-lg dark:text-neutral-200"
  >
    Open an issue
  </.link>
</div>
